// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: transactions.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionsService_GetIdentityTransactions_FullMethodName           = "/qubic.lts.transactions.pb.TransactionsService/GetIdentityTransactions"
	TransactionsService_GetIdentityTransfersInTickRangeV2_FullMethodName = "/qubic.lts.transactions.pb.TransactionsService/GetIdentityTransfersInTickRangeV2"
	TransactionsService_GetTickTransactionsV2_FullMethodName             = "/qubic.lts.transactions.pb.TransactionsService/GetTickTransactionsV2"
	TransactionsService_GetTickTransactions_FullMethodName               = "/qubic.lts.transactions.pb.TransactionsService/GetTickTransactions"
	TransactionsService_GetTickApprovedTransactions_FullMethodName       = "/qubic.lts.transactions.pb.TransactionsService/GetTickApprovedTransactions"
	TransactionsService_GetTransaction_FullMethodName                    = "/qubic.lts.transactions.pb.TransactionsService/GetTransaction"
	TransactionsService_GetTransactionStatus_FullMethodName              = "/qubic.lts.transactions.pb.TransactionsService/GetTransactionStatus"
	TransactionsService_GetTransactionV2_FullMethodName                  = "/qubic.lts.transactions.pb.TransactionsService/GetTransactionV2"
	TransactionsService_GetTickData_FullMethodName                       = "/qubic.lts.transactions.pb.TransactionsService/GetTickData"
	TransactionsService_GetArchiverStatus_FullMethodName                 = "/qubic.lts.transactions.pb.TransactionsService/GetArchiverStatus"
	TransactionsService_GetComputorsList_FullMethodName                  = "/qubic.lts.transactions.pb.TransactionsService/GetComputorsList"
	TransactionsService_GetLatestTick_FullMethodName                     = "/qubic.lts.transactions.pb.TransactionsService/GetLatestTick"
	TransactionsService_GetEpochTickListV2_FullMethodName                = "/qubic.lts.transactions.pb.TransactionsService/GetEpochTickListV2"
)

// TransactionsServiceClient is the client API for TransactionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsServiceClient interface {
	GetIdentityTransactions(ctx context.Context, in *GetIdentityTransactionsRequest, opts ...grpc.CallOption) (*GetIdentityTransactionsResponse, error)
	GetIdentityTransfersInTickRangeV2(ctx context.Context, in *GetTransferTransactionsPerTickRequestV2, opts ...grpc.CallOption) (*GetIdentityTransfersInTickRangeResponseV2, error)
	GetTickTransactionsV2(ctx context.Context, in *GetTickTransactionsRequestV2, opts ...grpc.CallOption) (*GetTickTransactionsResponseV2, error)
	GetTickTransactions(ctx context.Context, in *GetTickTransactionsRequest, opts ...grpc.CallOption) (*GetTickTransactionsResponse, error)
	// Deprecated: Use /v2/ticks/{tick_number}/transactions instead.
	GetTickApprovedTransactions(ctx context.Context, in *GetTickApprovedTransactionsRequest, opts ...grpc.CallOption) (*GetTickApprovedTransactionsResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// Deprecated: Use /v2/transactions/{tx_id} instead.
	GetTransactionStatus(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionStatusResponse, error)
	GetTransactionV2(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponseV2, error)
	GetTickData(ctx context.Context, in *GetTickDataRequest, opts ...grpc.CallOption) (*GetTickDataResponse, error)
	GetArchiverStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetArchiverStatusResponse, error)
	GetComputorsList(ctx context.Context, in *GetComputorsRequest, opts ...grpc.CallOption) (*GetComputorsResponse, error)
	GetLatestTick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLatestTickResponse, error)
	GetEpochTickListV2(ctx context.Context, in *GetEpochTickListRequestV2, opts ...grpc.CallOption) (*GetEpochTickListResponseV2, error)
}

type transactionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsServiceClient(cc grpc.ClientConnInterface) TransactionsServiceClient {
	return &transactionsServiceClient{cc}
}

func (c *transactionsServiceClient) GetIdentityTransactions(ctx context.Context, in *GetIdentityTransactionsRequest, opts ...grpc.CallOption) (*GetIdentityTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIdentityTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionsService_GetIdentityTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetIdentityTransfersInTickRangeV2(ctx context.Context, in *GetTransferTransactionsPerTickRequestV2, opts ...grpc.CallOption) (*GetIdentityTransfersInTickRangeResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIdentityTransfersInTickRangeResponseV2)
	err := c.cc.Invoke(ctx, TransactionsService_GetIdentityTransfersInTickRangeV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetTickTransactionsV2(ctx context.Context, in *GetTickTransactionsRequestV2, opts ...grpc.CallOption) (*GetTickTransactionsResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTickTransactionsResponseV2)
	err := c.cc.Invoke(ctx, TransactionsService_GetTickTransactionsV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetTickTransactions(ctx context.Context, in *GetTickTransactionsRequest, opts ...grpc.CallOption) (*GetTickTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTickTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionsService_GetTickTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetTickApprovedTransactions(ctx context.Context, in *GetTickApprovedTransactionsRequest, opts ...grpc.CallOption) (*GetTickApprovedTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTickApprovedTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionsService_GetTickApprovedTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, TransactionsService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetTransactionStatus(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionStatusResponse)
	err := c.cc.Invoke(ctx, TransactionsService_GetTransactionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetTransactionV2(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponseV2)
	err := c.cc.Invoke(ctx, TransactionsService_GetTransactionV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetTickData(ctx context.Context, in *GetTickDataRequest, opts ...grpc.CallOption) (*GetTickDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTickDataResponse)
	err := c.cc.Invoke(ctx, TransactionsService_GetTickData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetArchiverStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetArchiverStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArchiverStatusResponse)
	err := c.cc.Invoke(ctx, TransactionsService_GetArchiverStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetComputorsList(ctx context.Context, in *GetComputorsRequest, opts ...grpc.CallOption) (*GetComputorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComputorsResponse)
	err := c.cc.Invoke(ctx, TransactionsService_GetComputorsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetLatestTick(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLatestTickResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestTickResponse)
	err := c.cc.Invoke(ctx, TransactionsService_GetLatestTick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) GetEpochTickListV2(ctx context.Context, in *GetEpochTickListRequestV2, opts ...grpc.CallOption) (*GetEpochTickListResponseV2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEpochTickListResponseV2)
	err := c.cc.Invoke(ctx, TransactionsService_GetEpochTickListV2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServiceServer is the server API for TransactionsService service.
// All implementations must embed UnimplementedTransactionsServiceServer
// for forward compatibility.
type TransactionsServiceServer interface {
	GetIdentityTransactions(context.Context, *GetIdentityTransactionsRequest) (*GetIdentityTransactionsResponse, error)
	GetIdentityTransfersInTickRangeV2(context.Context, *GetTransferTransactionsPerTickRequestV2) (*GetIdentityTransfersInTickRangeResponseV2, error)
	GetTickTransactionsV2(context.Context, *GetTickTransactionsRequestV2) (*GetTickTransactionsResponseV2, error)
	GetTickTransactions(context.Context, *GetTickTransactionsRequest) (*GetTickTransactionsResponse, error)
	// Deprecated: Use /v2/ticks/{tick_number}/transactions instead.
	GetTickApprovedTransactions(context.Context, *GetTickApprovedTransactionsRequest) (*GetTickApprovedTransactionsResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	// Deprecated: Use /v2/transactions/{tx_id} instead.
	GetTransactionStatus(context.Context, *GetTransactionRequest) (*GetTransactionStatusResponse, error)
	GetTransactionV2(context.Context, *GetTransactionRequest) (*GetTransactionResponseV2, error)
	GetTickData(context.Context, *GetTickDataRequest) (*GetTickDataResponse, error)
	GetArchiverStatus(context.Context, *emptypb.Empty) (*GetArchiverStatusResponse, error)
	GetComputorsList(context.Context, *GetComputorsRequest) (*GetComputorsResponse, error)
	GetLatestTick(context.Context, *emptypb.Empty) (*GetLatestTickResponse, error)
	GetEpochTickListV2(context.Context, *GetEpochTickListRequestV2) (*GetEpochTickListResponseV2, error)
	mustEmbedUnimplementedTransactionsServiceServer()
}

// UnimplementedTransactionsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionsServiceServer struct{}

func (UnimplementedTransactionsServiceServer) GetIdentityTransactions(context.Context, *GetIdentityTransactionsRequest) (*GetIdentityTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityTransactions not implemented")
}
func (UnimplementedTransactionsServiceServer) GetIdentityTransfersInTickRangeV2(context.Context, *GetTransferTransactionsPerTickRequestV2) (*GetIdentityTransfersInTickRangeResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityTransfersInTickRangeV2 not implemented")
}
func (UnimplementedTransactionsServiceServer) GetTickTransactionsV2(context.Context, *GetTickTransactionsRequestV2) (*GetTickTransactionsResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickTransactionsV2 not implemented")
}
func (UnimplementedTransactionsServiceServer) GetTickTransactions(context.Context, *GetTickTransactionsRequest) (*GetTickTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickTransactions not implemented")
}
func (UnimplementedTransactionsServiceServer) GetTickApprovedTransactions(context.Context, *GetTickApprovedTransactionsRequest) (*GetTickApprovedTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickApprovedTransactions not implemented")
}
func (UnimplementedTransactionsServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedTransactionsServiceServer) GetTransactionStatus(context.Context, *GetTransactionRequest) (*GetTransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionStatus not implemented")
}
func (UnimplementedTransactionsServiceServer) GetTransactionV2(context.Context, *GetTransactionRequest) (*GetTransactionResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionV2 not implemented")
}
func (UnimplementedTransactionsServiceServer) GetTickData(context.Context, *GetTickDataRequest) (*GetTickDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickData not implemented")
}
func (UnimplementedTransactionsServiceServer) GetArchiverStatus(context.Context, *emptypb.Empty) (*GetArchiverStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchiverStatus not implemented")
}
func (UnimplementedTransactionsServiceServer) GetComputorsList(context.Context, *GetComputorsRequest) (*GetComputorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComputorsList not implemented")
}
func (UnimplementedTransactionsServiceServer) GetLatestTick(context.Context, *emptypb.Empty) (*GetLatestTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTick not implemented")
}
func (UnimplementedTransactionsServiceServer) GetEpochTickListV2(context.Context, *GetEpochTickListRequestV2) (*GetEpochTickListResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochTickListV2 not implemented")
}
func (UnimplementedTransactionsServiceServer) mustEmbedUnimplementedTransactionsServiceServer() {}
func (UnimplementedTransactionsServiceServer) testEmbeddedByValue()                             {}

// UnsafeTransactionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServiceServer will
// result in compilation errors.
type UnsafeTransactionsServiceServer interface {
	mustEmbedUnimplementedTransactionsServiceServer()
}

func RegisterTransactionsServiceServer(s grpc.ServiceRegistrar, srv TransactionsServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionsService_ServiceDesc, srv)
}

func _TransactionsService_GetIdentityTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetIdentityTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetIdentityTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetIdentityTransactions(ctx, req.(*GetIdentityTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetIdentityTransfersInTickRangeV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferTransactionsPerTickRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetIdentityTransfersInTickRangeV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetIdentityTransfersInTickRangeV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetIdentityTransfersInTickRangeV2(ctx, req.(*GetTransferTransactionsPerTickRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetTickTransactionsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickTransactionsRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetTickTransactionsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetTickTransactionsV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetTickTransactionsV2(ctx, req.(*GetTickTransactionsRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetTickTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetTickTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetTickTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetTickTransactions(ctx, req.(*GetTickTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetTickApprovedTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickApprovedTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetTickApprovedTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetTickApprovedTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetTickApprovedTransactions(ctx, req.(*GetTickApprovedTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetTransactionStatus(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetTransactionV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetTransactionV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetTransactionV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetTransactionV2(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetTickData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetTickData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetTickData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetTickData(ctx, req.(*GetTickDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetArchiverStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetArchiverStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetArchiverStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetArchiverStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetComputorsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComputorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetComputorsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetComputorsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetComputorsList(ctx, req.(*GetComputorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetLatestTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetLatestTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetLatestTick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetLatestTick(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_GetEpochTickListV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEpochTickListRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).GetEpochTickListV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_GetEpochTickListV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).GetEpochTickListV2(ctx, req.(*GetEpochTickListRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionsService_ServiceDesc is the grpc.ServiceDesc for TransactionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qubic.lts.transactions.pb.TransactionsService",
	HandlerType: (*TransactionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIdentityTransactions",
			Handler:    _TransactionsService_GetIdentityTransactions_Handler,
		},
		{
			MethodName: "GetIdentityTransfersInTickRangeV2",
			Handler:    _TransactionsService_GetIdentityTransfersInTickRangeV2_Handler,
		},
		{
			MethodName: "GetTickTransactionsV2",
			Handler:    _TransactionsService_GetTickTransactionsV2_Handler,
		},
		{
			MethodName: "GetTickTransactions",
			Handler:    _TransactionsService_GetTickTransactions_Handler,
		},
		{
			MethodName: "GetTickApprovedTransactions",
			Handler:    _TransactionsService_GetTickApprovedTransactions_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _TransactionsService_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionStatus",
			Handler:    _TransactionsService_GetTransactionStatus_Handler,
		},
		{
			MethodName: "GetTransactionV2",
			Handler:    _TransactionsService_GetTransactionV2_Handler,
		},
		{
			MethodName: "GetTickData",
			Handler:    _TransactionsService_GetTickData_Handler,
		},
		{
			MethodName: "GetArchiverStatus",
			Handler:    _TransactionsService_GetArchiverStatus_Handler,
		},
		{
			MethodName: "GetComputorsList",
			Handler:    _TransactionsService_GetComputorsList_Handler,
		},
		{
			MethodName: "GetLatestTick",
			Handler:    _TransactionsService_GetLatestTick_Handler,
		},
		{
			MethodName: "GetEpochTickListV2",
			Handler:    _TransactionsService_GetEpochTickListV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactions.proto",
}
