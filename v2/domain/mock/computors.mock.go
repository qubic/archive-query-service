// Code generated by MockGen. DO NOT EDIT.
// Source: computors.go
//
// Generated by this command:
//
//	mockgen -destination=mock/computors.mock.go -package=mock -source computors.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	api "github.com/qubic/archive-query-service/v2/api/archive-query-service/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockComputorsListRepository is a mock of ComputorsListRepository interface.
type MockComputorsListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockComputorsListRepositoryMockRecorder
	isgomock struct{}
}

// MockComputorsListRepositoryMockRecorder is the mock recorder for MockComputorsListRepository.
type MockComputorsListRepositoryMockRecorder struct {
	mock *MockComputorsListRepository
}

// NewMockComputorsListRepository creates a new mock instance.
func NewMockComputorsListRepository(ctrl *gomock.Controller) *MockComputorsListRepository {
	mock := &MockComputorsListRepository{ctrl: ctrl}
	mock.recorder = &MockComputorsListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputorsListRepository) EXPECT() *MockComputorsListRepositoryMockRecorder {
	return m.recorder
}

// GetComputorsListsForEpoch mocks base method.
func (m *MockComputorsListRepository) GetComputorsListsForEpoch(ctx context.Context, epoch uint32) ([]*api.ComputorsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputorsListsForEpoch", ctx, epoch)
	ret0, _ := ret[0].([]*api.ComputorsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComputorsListsForEpoch indicates an expected call of GetComputorsListsForEpoch.
func (mr *MockComputorsListRepositoryMockRecorder) GetComputorsListsForEpoch(ctx, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputorsListsForEpoch", reflect.TypeOf((*MockComputorsListRepository)(nil).GetComputorsListsForEpoch), ctx, epoch)
}
