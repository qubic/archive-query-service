// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qubic/go-data-publisher/status-service/protobuf (interfaces: StatusServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=mock/gprc_status.mock.go -package=mock github.com/qubic/go-data-publisher/status-service/protobuf StatusServiceClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	protobuf "github.com/qubic/go-data-publisher/status-service/protobuf"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockStatusServiceClient is a mock of StatusServiceClient interface.
type MockStatusServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceClientMockRecorder
	isgomock struct{}
}

// MockStatusServiceClientMockRecorder is the mock recorder for MockStatusServiceClient.
type MockStatusServiceClientMockRecorder struct {
	mock *MockStatusServiceClient
}

// NewMockStatusServiceClient creates a new mock instance.
func NewMockStatusServiceClient(ctrl *gomock.Controller) *MockStatusServiceClient {
	mock := &MockStatusServiceClient{ctrl: ctrl}
	mock.recorder = &MockStatusServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusServiceClient) EXPECT() *MockStatusServiceClientMockRecorder {
	return m.recorder
}

// GetArchiverStatus mocks base method.
func (m *MockStatusServiceClient) GetArchiverStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.GetArchiverStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArchiverStatus", varargs...)
	ret0, _ := ret[0].(*protobuf.GetArchiverStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchiverStatus indicates an expected call of GetArchiverStatus.
func (mr *MockStatusServiceClientMockRecorder) GetArchiverStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchiverStatus", reflect.TypeOf((*MockStatusServiceClient)(nil).GetArchiverStatus), varargs...)
}

// GetHealthCheck mocks base method.
func (m *MockStatusServiceClient) GetHealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.GetHealthCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHealthCheck", varargs...)
	ret0, _ := ret[0].(*protobuf.GetHealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthCheck indicates an expected call of GetHealthCheck.
func (mr *MockStatusServiceClientMockRecorder) GetHealthCheck(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheck", reflect.TypeOf((*MockStatusServiceClient)(nil).GetHealthCheck), varargs...)
}

// GetSkippedTicks mocks base method.
func (m *MockStatusServiceClient) GetSkippedTicks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.GetSkippedTicksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSkippedTicks", varargs...)
	ret0, _ := ret[0].(*protobuf.GetSkippedTicksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkippedTicks indicates an expected call of GetSkippedTicks.
func (mr *MockStatusServiceClientMockRecorder) GetSkippedTicks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkippedTicks", reflect.TypeOf((*MockStatusServiceClient)(nil).GetSkippedTicks), varargs...)
}

// GetStatus mocks base method.
func (m *MockStatusServiceClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.GetStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatus", varargs...)
	ret0, _ := ret[0].(*protobuf.GetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockStatusServiceClientMockRecorder) GetStatus(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockStatusServiceClient)(nil).GetStatus), varargs...)
}

// GetTickIntervals mocks base method.
func (m *MockStatusServiceClient) GetTickIntervals(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.GetTickIntervalsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTickIntervals", varargs...)
	ret0, _ := ret[0].(*protobuf.GetTickIntervalsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickIntervals indicates an expected call of GetTickIntervals.
func (mr *MockStatusServiceClientMockRecorder) GetTickIntervals(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickIntervals", reflect.TypeOf((*MockStatusServiceClient)(nil).GetTickIntervals), varargs...)
}
