// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go
//
// Generated by this command:
//
//	mockgen -destination=mock/repository.mock.go -package=mock -source transaction.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	api "github.com/qubic/archive-query-service/v2/api/archive-query-service/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// GetTransactionByHash mocks base method.
func (m *MockTransactionRepository) GetTransactionByHash(ctx context.Context, hash string) (*api.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", ctx, hash)
	ret0, _ := ret[0].(*api.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactionByHash(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactionByHash), ctx, hash)
}

// GetTransactionsForIdentity mocks base method.
func (m *MockTransactionRepository) GetTransactionsForIdentity(ctx context.Context, identity string, maxTick uint32, pageSize, pageNumber int, desc bool) ([]*api.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsForIdentity", ctx, identity, maxTick, pageSize, pageNumber, desc)
	ret0, _ := ret[0].([]*api.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsForIdentity indicates an expected call of GetTransactionsForIdentity.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactionsForIdentity(ctx, identity, maxTick, pageSize, pageNumber, desc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsForIdentity", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactionsForIdentity), ctx, identity, maxTick, pageSize, pageNumber, desc)
}

// GetTransactionsForTickNumber mocks base method.
func (m *MockTransactionRepository) GetTransactionsForTickNumber(ctx context.Context, tickNumber uint32) ([]*api.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsForTickNumber", ctx, tickNumber)
	ret0, _ := ret[0].([]*api.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsForTickNumber indicates an expected call of GetTransactionsForTickNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetTransactionsForTickNumber(ctx, tickNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsForTickNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetTransactionsForTickNumber), ctx, tickNumber)
}
