// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=mock/services.mock.go -package=mock -source service.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	api "github.com/qubic/archive-query-service/v2/api/archive-query-service/v2"
	entities "github.com/qubic/archive-query-service/v2/entities"
	protobuf "github.com/qubic/go-data-publisher/status-service/protobuf"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionsService is a mock of TransactionsService interface.
type MockTransactionsService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsServiceMockRecorder
	isgomock struct{}
}

// MockTransactionsServiceMockRecorder is the mock recorder for MockTransactionsService.
type MockTransactionsServiceMockRecorder struct {
	mock *MockTransactionsService
}

// NewMockTransactionsService creates a new mock instance.
func NewMockTransactionsService(ctrl *gomock.Controller) *MockTransactionsService {
	mock := &MockTransactionsService{ctrl: ctrl}
	mock.recorder = &MockTransactionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsService) EXPECT() *MockTransactionsServiceMockRecorder {
	return m.recorder
}

// GetTransactionByHash mocks base method.
func (m *MockTransactionsService) GetTransactionByHash(ctx context.Context, hash string) (*api.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", ctx, hash)
	ret0, _ := ret[0].(*api.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash.
func (mr *MockTransactionsServiceMockRecorder) GetTransactionByHash(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockTransactionsService)(nil).GetTransactionByHash), ctx, hash)
}

// GetTransactionsForIdentity mocks base method.
func (m *MockTransactionsService) GetTransactionsForIdentity(ctx context.Context, identity string, filters map[string]string, ranges map[string][]*entities.Range, from, size uint32) (*entities.TransactionsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsForIdentity", ctx, identity, filters, ranges, from, size)
	ret0, _ := ret[0].(*entities.TransactionsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsForIdentity indicates an expected call of GetTransactionsForIdentity.
func (mr *MockTransactionsServiceMockRecorder) GetTransactionsForIdentity(ctx, identity, filters, ranges, from, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsForIdentity", reflect.TypeOf((*MockTransactionsService)(nil).GetTransactionsForIdentity), ctx, identity, filters, ranges, from, size)
}

// GetTransactionsForTickNumber mocks base method.
func (m *MockTransactionsService) GetTransactionsForTickNumber(ctx context.Context, tickNumber uint32) ([]*api.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsForTickNumber", ctx, tickNumber)
	ret0, _ := ret[0].([]*api.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsForTickNumber indicates an expected call of GetTransactionsForTickNumber.
func (mr *MockTransactionsServiceMockRecorder) GetTransactionsForTickNumber(ctx, tickNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsForTickNumber", reflect.TypeOf((*MockTransactionsService)(nil).GetTransactionsForTickNumber), ctx, tickNumber)
}

// MockTickDataService is a mock of TickDataService interface.
type MockTickDataService struct {
	ctrl     *gomock.Controller
	recorder *MockTickDataServiceMockRecorder
	isgomock struct{}
}

// MockTickDataServiceMockRecorder is the mock recorder for MockTickDataService.
type MockTickDataServiceMockRecorder struct {
	mock *MockTickDataService
}

// NewMockTickDataService creates a new mock instance.
func NewMockTickDataService(ctrl *gomock.Controller) *MockTickDataService {
	mock := &MockTickDataService{ctrl: ctrl}
	mock.recorder = &MockTickDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTickDataService) EXPECT() *MockTickDataServiceMockRecorder {
	return m.recorder
}

// GetTickData mocks base method.
func (m *MockTickDataService) GetTickData(ctx context.Context, tickNumber uint32) (*api.TickData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickData", ctx, tickNumber)
	ret0, _ := ret[0].(*api.TickData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickData indicates an expected call of GetTickData.
func (mr *MockTickDataServiceMockRecorder) GetTickData(ctx, tickNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickData", reflect.TypeOf((*MockTickDataService)(nil).GetTickData), ctx, tickNumber)
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
	isgomock struct{}
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// GetProcessedTickIntervals mocks base method.
func (m *MockStatusService) GetProcessedTickIntervals(ctx context.Context) ([]*api.ProcessedTickInterval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessedTickIntervals", ctx)
	ret0, _ := ret[0].([]*api.ProcessedTickInterval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessedTickIntervals indicates an expected call of GetProcessedTickIntervals.
func (mr *MockStatusServiceMockRecorder) GetProcessedTickIntervals(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessedTickIntervals", reflect.TypeOf((*MockStatusService)(nil).GetProcessedTickIntervals), ctx)
}

// GetStatus mocks base method.
func (m *MockStatusService) GetStatus(ctx context.Context) (*protobuf.GetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx)
	ret0, _ := ret[0].(*protobuf.GetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockStatusServiceMockRecorder) GetStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockStatusService)(nil).GetStatus), ctx)
}

// MockComputorsListService is a mock of ComputorsListService interface.
type MockComputorsListService struct {
	ctrl     *gomock.Controller
	recorder *MockComputorsListServiceMockRecorder
	isgomock struct{}
}

// MockComputorsListServiceMockRecorder is the mock recorder for MockComputorsListService.
type MockComputorsListServiceMockRecorder struct {
	mock *MockComputorsListService
}

// NewMockComputorsListService creates a new mock instance.
func NewMockComputorsListService(ctrl *gomock.Controller) *MockComputorsListService {
	mock := &MockComputorsListService{ctrl: ctrl}
	mock.recorder = &MockComputorsListServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputorsListService) EXPECT() *MockComputorsListServiceMockRecorder {
	return m.recorder
}

// GetComputorsListsForEpoch mocks base method.
func (m *MockComputorsListService) GetComputorsListsForEpoch(ctx context.Context, epoch uint32) ([]*api.ComputorsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputorsListsForEpoch", ctx, epoch)
	ret0, _ := ret[0].([]*api.ComputorsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComputorsListsForEpoch indicates an expected call of GetComputorsListsForEpoch.
func (mr *MockComputorsListServiceMockRecorder) GetComputorsListsForEpoch(ctx, epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputorsListsForEpoch", reflect.TypeOf((*MockComputorsListService)(nil).GetComputorsListsForEpoch), ctx, epoch)
}
