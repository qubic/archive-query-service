syntax = "proto3";

package qubic.v2.archive.pb;
option go_package = "github.com/qubic/archive-query-service/api";

message LastProcessedTick {
    uint32 last_processed_tick = 1;
}

message NextAvailableTick {
    uint32 next_tick_number = 1;
}

message Transaction {
    string hash = 1;
    uint64 amount = 2;
    string source = 3;
    string destination = 4;
    uint32 tick_number = 5;
    uint64 timestamp = 6;
    uint32 input_type = 7;
    uint32 input_size = 8;
    string input_data = 9;
    string signature = 10;
    bool money_flew = 11;
}

message TickData {
    uint32 tick_number = 1;
    uint32 epoch = 2;
    uint32 computor_index = 3;
    uint64 timestamp = 4;
    string var_struct = 5;
    string time_lock = 6;
    repeated string transaction_hashes = 7;
    repeated int64 contract_fees = 8;
    string signature = 9;
}

// aggregations

message RangeUint64 {
    optional uint64 gt = 1;
    optional uint64 gte = 2;
    optional uint64 lt = 3;
    optional uint64 lte = 4;
}

message RangeUint32 {
    optional uint32 gt = 1;
    optional uint32 gte = 2;
    optional uint32 lt = 3;
    optional uint32 lte = 4;
}

// paging

message Page {
    optional uint32 number = 1;
    optional uint32 size = 2;
}

// requests and responses

message GetTransactionByHashRequest {
    string hash = 1;
}

message GetTransactionByHashResponse {
    Transaction transaction = 1;
}

message GetTransactionsForTickRequest {
    uint32 tick_number = 1;
}

message GetTransactionsForTickResponse {
    repeated Transaction transactions = 1;
}

//message GetTransactionsForIdentityFilters {
//    optional string destination = 1;
//    optional string source = 2;
//    optional uint64 amount = 3;
//    optional uint32 input_type = 4;
//    optional uint32 tick_number = 5;
//    optional uint64 timestamp = 6;
//}
//
//message GetTransactionsForIdentityRanges {
//    optional RangeUint64 amount = 1;
//    optional RangeUint32 input_type = 2;
//    optional RangeUint32 tick_number = 3;
//    optional RangeUint64 timestamp = 4;
//}

message Filter {
    string property = 1;
    string value = 2;
}

message Range {
    oneof lower_bound {
        string gt = 1;
        string gte = 2;
    }
    oneof upper_bound {
        string lt = 3;
        string lte = 4;
    }
}

message GetTransactionsForIdentityRequest {
    string identity = 1;
    map<string, string> filters = 2;
    map<string, Range> ranges = 3;
    optional Page page = 4;
}
//
//message Pagination {
//    uint32 total_hits = 1;
//    uint32 current_page = 2;
//    uint32 page_size = 3;
//}


message Pagination {
    message hits {
        uint32 total = 1;
        string relation = 2;
    }
    uint32 current_page = 1;
    uint32 page_size = 2;
}

message GetTransactionsForIdentityResponse {
    Pagination pagination = 1;
    repeated Transaction transactions = 2;
}

message GetTickDataRequest {
    uint32 tick_number = 1;
}

message GetTickDataResponse {
    TickData tick_data = 1;
}