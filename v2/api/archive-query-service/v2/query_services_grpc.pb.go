// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.31.0
// source: query_services.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArchiveQueryService_GetTransactionByHash_FullMethodName       = "/qubic.v2.archive.pb.ArchiveQueryService/GetTransactionByHash"
	ArchiveQueryService_GetTransactionsForTick_FullMethodName     = "/qubic.v2.archive.pb.ArchiveQueryService/GetTransactionsForTick"
	ArchiveQueryService_GetTransactionsForIdentity_FullMethodName = "/qubic.v2.archive.pb.ArchiveQueryService/GetTransactionsForIdentity"
	ArchiveQueryService_GetTickData_FullMethodName                = "/qubic.v2.archive.pb.ArchiveQueryService/GetTickData"
)

// ArchiveQueryServiceClient is the client API for ArchiveQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchiveQueryServiceClient interface {
	GetTransactionByHash(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*GetTransactionByHashResponse, error)
	GetTransactionsForTick(ctx context.Context, in *GetTransactionsForTickRequest, opts ...grpc.CallOption) (*GetTransactionsForTickResponse, error)
	GetTransactionsForIdentity(ctx context.Context, in *GetTransactionsForIdentityRequest, opts ...grpc.CallOption) (*GetTransactionsForIdentityResponse, error)
	GetTickData(ctx context.Context, in *GetTickDataRequest, opts ...grpc.CallOption) (*GetTickDataResponse, error)
}

type archiveQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArchiveQueryServiceClient(cc grpc.ClientConnInterface) ArchiveQueryServiceClient {
	return &archiveQueryServiceClient{cc}
}

func (c *archiveQueryServiceClient) GetTransactionByHash(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*GetTransactionByHashResponse, error) {
	out := new(GetTransactionByHashResponse)
	err := c.cc.Invoke(ctx, ArchiveQueryService_GetTransactionByHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveQueryServiceClient) GetTransactionsForTick(ctx context.Context, in *GetTransactionsForTickRequest, opts ...grpc.CallOption) (*GetTransactionsForTickResponse, error) {
	out := new(GetTransactionsForTickResponse)
	err := c.cc.Invoke(ctx, ArchiveQueryService_GetTransactionsForTick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveQueryServiceClient) GetTransactionsForIdentity(ctx context.Context, in *GetTransactionsForIdentityRequest, opts ...grpc.CallOption) (*GetTransactionsForIdentityResponse, error) {
	out := new(GetTransactionsForIdentityResponse)
	err := c.cc.Invoke(ctx, ArchiveQueryService_GetTransactionsForIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveQueryServiceClient) GetTickData(ctx context.Context, in *GetTickDataRequest, opts ...grpc.CallOption) (*GetTickDataResponse, error) {
	out := new(GetTickDataResponse)
	err := c.cc.Invoke(ctx, ArchiveQueryService_GetTickData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveQueryServiceServer is the server API for ArchiveQueryService service.
// All implementations must embed UnimplementedArchiveQueryServiceServer
// for forward compatibility
type ArchiveQueryServiceServer interface {
	GetTransactionByHash(context.Context, *GetTransactionByHashRequest) (*GetTransactionByHashResponse, error)
	GetTransactionsForTick(context.Context, *GetTransactionsForTickRequest) (*GetTransactionsForTickResponse, error)
	GetTransactionsForIdentity(context.Context, *GetTransactionsForIdentityRequest) (*GetTransactionsForIdentityResponse, error)
	GetTickData(context.Context, *GetTickDataRequest) (*GetTickDataResponse, error)
	mustEmbedUnimplementedArchiveQueryServiceServer()
}

// UnimplementedArchiveQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArchiveQueryServiceServer struct {
}

func (UnimplementedArchiveQueryServiceServer) GetTransactionByHash(context.Context, *GetTransactionByHashRequest) (*GetTransactionByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (UnimplementedArchiveQueryServiceServer) GetTransactionsForTick(context.Context, *GetTransactionsForTickRequest) (*GetTransactionsForTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsForTick not implemented")
}
func (UnimplementedArchiveQueryServiceServer) GetTransactionsForIdentity(context.Context, *GetTransactionsForIdentityRequest) (*GetTransactionsForIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsForIdentity not implemented")
}
func (UnimplementedArchiveQueryServiceServer) GetTickData(context.Context, *GetTickDataRequest) (*GetTickDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickData not implemented")
}
func (UnimplementedArchiveQueryServiceServer) mustEmbedUnimplementedArchiveQueryServiceServer() {}

// UnsafeArchiveQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchiveQueryServiceServer will
// result in compilation errors.
type UnsafeArchiveQueryServiceServer interface {
	mustEmbedUnimplementedArchiveQueryServiceServer()
}

func RegisterArchiveQueryServiceServer(s grpc.ServiceRegistrar, srv ArchiveQueryServiceServer) {
	s.RegisterService(&ArchiveQueryService_ServiceDesc, srv)
}

func _ArchiveQueryService_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveQueryServiceServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveQueryService_GetTransactionByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveQueryServiceServer).GetTransactionByHash(ctx, req.(*GetTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveQueryService_GetTransactionsForTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsForTickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveQueryServiceServer).GetTransactionsForTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveQueryService_GetTransactionsForTick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveQueryServiceServer).GetTransactionsForTick(ctx, req.(*GetTransactionsForTickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveQueryService_GetTransactionsForIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsForIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveQueryServiceServer).GetTransactionsForIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveQueryService_GetTransactionsForIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveQueryServiceServer).GetTransactionsForIdentity(ctx, req.(*GetTransactionsForIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveQueryService_GetTickData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveQueryServiceServer).GetTickData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveQueryService_GetTickData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveQueryServiceServer).GetTickData(ctx, req.(*GetTickDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArchiveQueryService_ServiceDesc is the grpc.ServiceDesc for ArchiveQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArchiveQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qubic.v2.archive.pb.ArchiveQueryService",
	HandlerType: (*ArchiveQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionByHash",
			Handler:    _ArchiveQueryService_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionsForTick",
			Handler:    _ArchiveQueryService_GetTransactionsForTick_Handler,
		},
		{
			MethodName: "GetTransactionsForIdentity",
			Handler:    _ArchiveQueryService_GetTransactionsForIdentity_Handler,
		},
		{
			MethodName: "GetTickData",
			Handler:    _ArchiveQueryService_GetTickData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query_services.proto",
}
