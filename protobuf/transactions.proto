syntax = "proto3";

package qubic.lts.transactions.pb;

option go_package = "github.com/qubic/archive-query-service/protobuf/";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message LastProcessedTick {
  uint32 last_processed_tick = 1;
}

message GetTickRequestV2 {
  uint32 tick_number = 1;
}

message GetTickTransactionsRequestV2 {
  uint32 tick_number = 1;
  bool transfers = 2;
  bool approved = 3;
}

message GetTickTransactionsResponseV2 {
  repeated TransactionData transactions = 1;
}

message GetTickTransactionsRequest {
  uint32 tick_number = 1;
}

message GetTickApprovedTransactionsRequest {
  uint32 tick_number = 1;
}

message NextAvailableTick {
  uint32 next_tick_number = 1;
}

message GetIdentityTransactionsRequest {
  string identity = 1;
  bool desc = 2;
  uint32 page = 3;
  uint32 page_size = 4;
}

message GetIdentityTransactionsResponse {
  Pagination pagination = 1;
  string identity = 2;
  repeated NewTransaction transactions = 3;
}

message Pagination {
  int32 total_records = 1;
  int32 current_page = 2;
  int32 total_pages = 3;
  int32 page_size = 4;
  int32 next_page = 5;
  int32 previous_page = 6;
}

message Transaction {
  string source_id = 1;
  string dest_id = 2;
  int64 amount = 3;
  uint32 tick_number = 4;
  uint32 input_type = 5;
  uint32 input_size = 6;
  string input_hex = 7;
  string signature_hex = 8;
  string tx_id = 9;
}

message GetTransferTransactionsPerTickRequestV2 {
  string identity = 1;
  uint32 start_tick = 2;
  uint32 end_tick = 3;
  bool sc_only = 4;
  bool desc = 5;
  uint32 page = 6;
  uint32 page_size = 7;
}

message GetIdentityTransfersInTickRangeResponseV2 {
  Pagination pagination = 1;
  repeated PerTickIdentityTransfers transactions = 2;
}

message PerTickIdentityTransfers {
  uint32 tick_number = 1;
  string identity = 2;
  repeated TransactionData transactions = 3;
}

message NewTransaction {
  string source_id = 1;
  string dest_id = 2;
  int64 amount = 3;
  uint32 tick_number = 4;
  uint32 input_type = 5;
  uint32 input_size = 6;
  string input = 7;
  string signature = 8;
  string tx_id = 9;
  uint64 timestamp = 10;
  bool money_flew = 11;
}

message TransactionData {
  Transaction transaction = 1;
  uint64 timestamp = 2;
  bool money_flew = 3;
}

message GetTickTransactionsResponse {
  repeated Transaction transactions = 1;
}

message GetTickApprovedTransactionsResponse {
  repeated Transaction approved_transactions = 1;
}

message GetTransactionRequest {
  string tx_id = 1;
}

message TransactionStatus {
  string tx_id = 1;
  bool moneyFlew = 2;
}

message GetTransactionStatusResponse {
  TransactionStatus transaction_status = 1;
}

message GetTransactionResponse{
  Transaction transaction = 1;
}

message GetTransactionResponseV2 {
  Transaction transaction = 1;
  uint64 timestamp = 2;
  bool money_flew = 3;
}

message TickData {
  uint32 computor_index = 1;
  uint32 epoch = 2;
  uint32 tick_number = 3;
  uint64 timestamp = 4;
  bytes var_struct = 5;
  bytes time_lock = 6;
  repeated string transaction_ids = 7;
  repeated int64 contract_fees = 8;
  string signature_hex = 9;
}

message GetTickDataRequest {
  uint32 tick_number = 1;
}


message GetTickDataResponse {
  TickData tick_data = 1;
}

service TransactionsService {
  rpc GetIdentityTransactions(GetIdentityTransactionsRequest) returns (GetIdentityTransactionsResponse) {
    option (google.api.http) = {
      get: "/v2/identities/{identity}/transactions"
    };
  };

  rpc GetIdentityTransfersInTickRangeV2(GetTransferTransactionsPerTickRequestV2) returns (GetIdentityTransfersInTickRangeResponseV2) {// Uses V1 request
    option (google.api.http) = {
      get: "/v2/identities/{identity}/transfers"
    };
  };

  rpc GetTickTransactionsV2(GetTickTransactionsRequestV2) returns (GetTickTransactionsResponseV2){
    option (google.api.http) = {
      get: "/v2/ticks/{tick_number}/transactions"
    };
  };

  rpc GetTickTransactions(GetTickTransactionsRequest) returns (GetTickTransactionsResponse) {
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/transactions"
    };
  };

  // Deprecated: Use /v2/ticks/{tick_number}/transactions instead.
  rpc GetTickApprovedTransactions (GetTickApprovedTransactionsRequest) returns (GetTickApprovedTransactionsResponse) {
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/approved-transactions"
    };
  }

  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse) {
    option (google.api.http) = {
      get: "/v1/transactions/{tx_id}"
    };
  };

  // Deprecated: Use /v2/transactions/{tx_id} instead.
  rpc GetTransactionStatus (GetTransactionRequest) returns (GetTransactionStatusResponse) {
    option (google.api.http) = {
      get: "/v1/tx-status/{tx_id}"
    };
  }

  rpc GetTransactionV2(GetTransactionRequest) returns (GetTransactionResponseV2) {
    option (google.api.http) = {
      get: "/v2/transactions/{tx_id}"
    };
  };

  rpc GetTickData(GetTickDataRequest) returns (GetTickDataResponse){
    option (google.api.http) = {
      get: "/v1/ticks/{tick_number}/tick-data"
    };
  };
}

